swagger: '2.0'
info:
  description: This is the RESTful API for managing Challenge Questions in WSO2 Identity Server
  version: "1.0.0"
  title: WSO2 Identity Server - Challenge Question API
  contact:
    name: "WSO2 Identity Server"
    url: "https://wso2.com/identity-and-access-management/"
    email: "architecture@wso2.com"
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

schemes:
 - https
# host: is.wso2.com
# basePath: /t/{tenant-domain}/api/identity/1.0.0/

# tags are used for organizing operations
tags:
- name: management
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /challenges:
    post:
      tags:
        - management
      summary: "adds a new challenge question"
      operationId: addChallengeQuestionSet
      description: |
        Adds a new challenge question to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: challengeSet
        description: challenge-question to add
        schema:
          type: array
          items:
            $ref: '#/definitions/ChallengeSet'
      x-wso2-curl: |
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
    get:
      tags:
        - management
      summary: searches challenge-question
      operationId: searchChallengeQuestion
      description: |
        By passing in the appropriate options, you can search for
        available challenge-question in the system
      parameters:
        - $ref: '#/parameters/localeQueryParam'
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      x-wso2-curl: |
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          description: bad input parameter
  /challenges/{challenge-set-id}:
    get:
      tags:
        - management
      summary: searches challenge-question
      operationId: getChallengeQuestionOfASet
      description: |
        By passing in the appropriate options, you can search for
        available challenge-question in the system
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/localeQueryParam'
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      x-wso2-curl: |
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          description: bad input parameter
    put:
      tags:
        - management
      summary: "update challenge question"
      operationId: updateChallengeQuestionSet
      description: |
        Updates an existing challenge question set in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - in: body
          name: challengeSet
          description: challenge-question for the set
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeQuestion'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
        404:
          description: an existing item does not exists
      x-wso2-curl: |
    patch:
      tags:
        - management
      summary: "update challenge question"
      operationId: addChallengeQuestion
      description: |
        Add new challenge question for an existing set
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - in: body
          name: challenge-question
          description: challenge-question to update
          schema:
            $ref: '#/definitions/ChallengeQuestionPatch'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
        404:
          description: an existing item does not exists
      x-wso2-curl: |
    delete:
      tags:
        - management
      summary: "removes a challenge question set"
      operationId: deleteChallengeQuestionSet
      description: |
        Removes an existing challenge question set from the system. By specifying the locale query parameter, questions of specific locale can be deleted within the Set.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/localeQueryParam'
      responses:
        200:
          description: item deleted
        400:
          description: invalid input, object invalid
        404:
          description: a item does not exists
      x-wso2-curl: |
  /challenges/{challenge-set-id}/questions/{question-id}:
    delete:
      tags:
        - management
      summary: "removes a challenge question"
      operationId: deleteChallengeQuestion
      description: |
        Removes an existing challenge question set from the system. By specifying the locale query parameter, locale specific entry for the question can be deleted.
      parameters:
        - $ref: '#/parameters/questionIdPathParam'
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/localeQueryParam'
      responses:
        200:
          description: item deleted
        400:
          description: invalid input, object invalid
        404:
          description: a item does not exists
      x-wso2-curl: |
  /users/{user-id}/challenges:
    get:
      tags:
        - developers
      summary: searches challenge-question for a user
      operationId: searchUserChallengeQuestion
      description: |
        Search for
        available challenge-question in the system for the user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          description: bad input parameter
  /users/{user-id}/challenge-answers:
    post:
      tags:
        - developers
      summary: "answers a new challenge question"
      operationId: addChallengeAnswersOfAUser
      description: |
        Adds a new challenge question answer to the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        404:
          description: a question doest not exist
    get:
      tags:
        - developers
      summary: "get user's challenge answers"
      operationId: getChallengeAnswersOfAUser
      description: |
        Get answered challenges in the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'

      responses:
        200:
          description: earch results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
        400:
          description: invalid input, object invalid
        404:
          description: a question doest not exist
    put:
      tags:
        - developers
      summary: "answers new challenge question combination"
      operationId: updateChallengeAnswersOfAUser
      description: |
        Addsnew challenge question answers to the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        404:
          description: a question doest not exist
    delete:
      tags:
        - developers
      summary: "removes challenge question answers"
      operationId: deleteChallengeAnswersOfAUser
      description: |
        Removes existing challenge question answers of a user
      parameters:
        - $ref: '#/parameters/usernamePathParams'
      responses:
        200:
          description: item deleted
        400:
          description: invalid input, object invalid
        404:
          description: a item does not exists
  /users/{user-id}/challenge-answers/{challenge-set-id}:
    put:
      tags:
        - developers
      summary: "answers a new challenge question"
      operationId: updateChallengeAnswerOfAUser
      description: |
        Adds a new challenge question answer to the system for a specific user.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
            type: object
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        404:
          description: a question doest not exist
    delete:
      tags:
        - developers
      summary: "removes a challenge question answer"
      operationId: deleteChallengeAnswerOfAUser
      description: |
        Removes existing challenge question answers of a user
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
      responses:
        200:
          description: item deleted
        400:
          description: invalid input, object invalid
        404:
          description: a item does not exists
  /users/me/challenges:
    get:
      tags:
        - developers
      summary: searches challenge-question for authenticated user
      operationId: searchLoggedInUsersChallengeQuestion
      description: |
        Retrieve the
        available challenge-question in the system for the authenticated user
      parameters:
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          description: bad input parameter
  /users/me/challenge-answers:
    post:
      tags:
        - developers
      summary: "answers a new challenge question"
      operationId: addLoggedInUsersChallengeAnswers
      description: |
        Adds a new challenge question answer to the system
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        404:
          description: a question doest not exist
    get:
      tags:
        - developers
      summary: "get user's challenge answers"
      operationId: getChallengeAnswersOfLoggedInUser
      description: |
        Get answered challenges in the system for a specific user.
      parameters:
        - $ref: '#/parameters/usernamePathParams'

      responses:
        200:
          description: earch results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
        400:
          description: invalid input, object invalid
        404:
          description: results doest not exist
    delete:
      tags:
        - developers
      summary: "removes challenge question answers"
      operationId: deleteLoggenInUsersChallengeAnswers
      description: |
        Removes an existing challenge question answers of the authenticated user
      parameters:
        - $ref: '#/parameters/usernamePathParams'
      responses:
        200:
          description: item deleted
        400:
          description: invalid input, object invalid
        404:
          description: a item does not exists
  /users/me/challenge-answers/{challenge-set-id}:
    put:
      tags:
        - developers
      summary: "answers a new challenge question"
      operationId: updateChallengeAnswerOfLoggedInUser
      description: |
        Adds a new challenge question answer to the system for authenticated user.
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: challenge-question with answer
          schema:
            type: object
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        404:
          description: a question doest not exist
    delete:
      tags:
        - developers
      summary: "removes a challenge question answer"
      operationId: deleteChallengeAnswerOfLoggedInUser
      description: |
        Removes existing challenge question answers of authenticated user
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
      responses:
        200:
          description: item deleted
        400:
          description: invalid input, object invalid
        404:
          description: a item does not exists
parameters:
    usernamePathParams:
      in: path
      name: user-id
      required: true
      type: string
      description: username of the user
    questionSetIdPathParam:
      in: path
      name: challenge-set-id
      required: true
      type: string
      description: Challenge Question set Id
    questionIdPathParam:
      in: path
      name: question-id
      required: true
      type: string
      description: Challenge Question Id
    localeQueryParam:
      in: query
      name: locale
      description: pass an optional search string for looking up challenge-question based on locale
      required: false
      type: string

definitions:
    #-----------------------------------------------------
    # ChallengeSet Properties object
    #-----------------------------------------------------
  ChallengeSet:
    type: object
    required:
      - challenge-set-id
      - questions
    properties:
      question-set-id:
        type: string
        example: challengeQuestion1
      questions:
        type: array
        items:
          $ref: '#/definitions/ChallengeQuestion'
  #-----------------------------------------------------
  # ChallengeQuestion Properties object
  #-----------------------------------------------------
  ChallengeQuestion:
    type: object
    required:
      - locale
      - question
      - question-id
    properties:
      locale:
        type: string
        example: en_US
      question:
        type: string
        example: What is your favorite travel destination ?
      question-id:
        type: string
        example: question1
  #-----------------------------------------------------
  # ChallengeAnswer Properties object
  #-----------------------------------------------------
  ChallengeAnswer:
    type: object
    required:
      - answer
      - challenge-question
    properties:
      question-set-id:
        type: string
        example: challengeQuestionSet1
      challenge-question:
          $ref: '#/definitions/ChallengeQuestion'
      answer:
        type: string
        example: Colombo
    #-----------------------------------------------------
  # ChallengeAnswer Properties object
  #-----------------------------------------------------
  ChallengeQuestionPatch:
    type: object
    required:
      - operation
      - challenge-question
    properties:
      challenge-question:
          $ref: '#/definitions/ChallengeQuestion'
      operation:
        type: string
        example: add
securityDefinitions:
  BasicAuth:
    type: basic
  # ClientCertificate:
  #   type: custom
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth/authorize
    tokenUrl: https://localhost:9443/oauth/token
    scopes:
      read: Grants read access
      write: Grants write access
      admin: Grants read and write access to administrative information
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /ayshsandu/ChallengeQuestions/1.0.0